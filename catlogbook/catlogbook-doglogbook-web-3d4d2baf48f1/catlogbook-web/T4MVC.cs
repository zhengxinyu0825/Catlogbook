// <auto-generated />
// This file was generated by a T4 template.
// Don't change it directly as your change would get overwritten.  Instead, make changes
// to the .tt file (i.e. the T4 template) and save it to regenerate this file.

// Make sure the compiler doesn't complain about missing Xml comments and CLS compliance
// 0108: suppress "Foo hides inherited member Foo. Use the new keyword if hiding was intended." when a controller and its abstract parent are both processed
// 0114: suppress "Foo.BarController.Baz()' hides inherited member 'Qux.BarController.Baz()'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword." when an action (with an argument) overrides an action in a parent controller
#pragma warning disable 1591, 3008, 3009, 0108, 0114
#region T4MVC

using System;
using System.Diagnostics;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Threading.Tasks;
using System.Web;
using System.Web.Hosting;
using System.Web.Mvc;
using System.Web.Mvc.Ajax;
using System.Web.Mvc.Html;
using System.Web.Routing;
using T4MVC;

[GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
public static partial class MVC
{
    public static doglogbook_web.Controllers.AccountController Account = new doglogbook_web.Controllers.T4MVC_AccountController();
    public static doglogbook_web.Controllers.FAQController FAQ = new doglogbook_web.Controllers.T4MVC_FAQController();
    public static doglogbook_web.Controllers.HomeController Home = new doglogbook_web.Controllers.T4MVC_HomeController();
    public static doglogbook_web.Controllers.ManageController Manage = new doglogbook_web.Controllers.T4MVC_ManageController();
    public static T4MVC.EmailsController Emails = new T4MVC.EmailsController();
    public static T4MVC.SharedController Shared = new T4MVC.SharedController();
}

namespace T4MVC
{
}

namespace T4MVC
{
    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public class Dummy
    {
        private Dummy() { }
        public static Dummy Instance = new Dummy();
    }
}

[GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
internal partial class T4MVC_System_Web_Mvc_ActionResult : System.Web.Mvc.ActionResult, IT4MVCActionResult
{
    public T4MVC_System_Web_Mvc_ActionResult(string area, string controller, string action, string protocol = null): base()
    {
        this.InitMVCT4Result(area, controller, action, protocol);
    }
     
    public override void ExecuteResult(System.Web.Mvc.ControllerContext context) { }
    
    public string Controller { get; set; }
    public string Action { get; set; }
    public string Protocol { get; set; }
    public RouteValueDictionary RouteValueDictionary { get; set; }
}



namespace Links
{
    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public static class Scripts {
        private const string URLPATH = "~/Scripts";
        public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
        public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
        public static readonly string _references_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/_references.min.js") ? Url("_references.min.js") : Url("_references.js");
        public static readonly string bootstrap_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/bootstrap.min.js") ? Url("bootstrap.min.js") : Url("bootstrap.js");
        public static readonly string bootstrap_min_js = Url("bootstrap.min.js");
        public static readonly string jquery_1_10_2_intellisense_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery-1.10.2.intellisense.min.js") ? Url("jquery-1.10.2.intellisense.min.js") : Url("jquery-1.10.2.intellisense.js");
        public static readonly string jquery_2_2_3_intellisense_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery-2.2.3.intellisense.min.js") ? Url("jquery-2.2.3.intellisense.min.js") : Url("jquery-2.2.3.intellisense.js");
        public static readonly string jquery_2_2_3_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery-2.2.3.min.js") ? Url("jquery-2.2.3.min.js") : Url("jquery-2.2.3.js");
        public static readonly string jquery_2_2_3_min_js = Url("jquery-2.2.3.min.js");
        public static readonly string jquery_2_2_3_min_map = Url("jquery-2.2.3.min.map");
        public static readonly string jquery_validate_vsdoc_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery.validate-vsdoc.min.js") ? Url("jquery.validate-vsdoc.min.js") : Url("jquery.validate-vsdoc.js");
        public static readonly string jquery_validate_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery.validate.min.js") ? Url("jquery.validate.min.js") : Url("jquery.validate.js");
        public static readonly string jquery_validate_min_js = Url("jquery.validate.min.js");
        public static readonly string jquery_validate_unobtrusive_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery.validate.unobtrusive.min.js") ? Url("jquery.validate.unobtrusive.min.js") : Url("jquery.validate.unobtrusive.js");
        public static readonly string jquery_validate_unobtrusive_min_js = Url("jquery.validate.unobtrusive.min.js");
        public static readonly string modernizr_2_6_2_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/modernizr-2.6.2.min.js") ? Url("modernizr-2.6.2.min.js") : Url("modernizr-2.6.2.js");
        public static readonly string modernizr_2_8_3_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/modernizr-2.8.3.min.js") ? Url("modernizr-2.8.3.min.js") : Url("modernizr-2.8.3.js");
        public static readonly string respond_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/respond.min.js") ? Url("respond.min.js") : Url("respond.js");
        public static readonly string respond_matchmedia_addListener_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/respond.matchmedia.addListener.min.js") ? Url("respond.matchmedia.addListener.min.js") : Url("respond.matchmedia.addListener.js");
        public static readonly string respond_matchmedia_addListener_min_js = Url("respond.matchmedia.addListener.min.js");
        public static readonly string respond_min_js = Url("respond.min.js");
    }

    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public static class Content {
        private const string URLPATH = "~/Content";
        public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
        public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
        public static readonly string bootstrap_theme_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/bootstrap-theme.min.css") ? Url("bootstrap-theme.min.css") : Url("bootstrap-theme.css");
        public static readonly string bootstrap_theme_css_map = Url("bootstrap-theme.css.map");
        public static readonly string bootstrap_theme_min_css = Url("bootstrap-theme.min.css");
        public static readonly string bootstrap_theme_min_css_map = Url("bootstrap-theme.min.css.map");
        public static readonly string bootstrap_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/bootstrap.min.css") ? Url("bootstrap.min.css") : Url("bootstrap.css");
        public static readonly string bootstrap_css_map = Url("bootstrap.css.map");
        public static readonly string bootstrap_min_css = Url("bootstrap.min.css");
        public static readonly string bootstrap_min_css_map = Url("bootstrap.min.css.map");
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public static class font_awesome {
            private const string URLPATH = "~/Content/font-awesome";
            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
            public static class css {
                private const string URLPATH = "~/Content/font-awesome/css";
                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                public static readonly string font_awesome_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/font-awesome.min.css") ? Url("font-awesome.min.css") : Url("font-awesome.css");
                public static readonly string font_awesome_min_css = Url("font-awesome.min.css");
            }
        
            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
            public static class fonts {
                private const string URLPATH = "~/Content/font-awesome/fonts";
                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                public static readonly string fontawesome_webfont_eot = Url("fontawesome-webfont.eot");
                public static readonly string fontawesome_webfont_svg = Url("fontawesome-webfont.svg");
                public static readonly string fontawesome_webfont_ttf = Url("fontawesome-webfont.ttf");
                public static readonly string fontawesome_webfont_woff = Url("fontawesome-webfont.woff");
                public static readonly string FontAwesome_otf = Url("FontAwesome.otf");
            }
        
            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
            public static class less {
                private const string URLPATH = "~/Content/font-awesome/less";
                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                public static readonly string bordered_pulled_less = Url("bordered-pulled.less");
                public static readonly string core_less = Url("core.less");
                public static readonly string fixed_width_less = Url("fixed-width.less");
                public static readonly string font_awesome_less = Url("font-awesome.less");
                public static readonly string icons_less = Url("icons.less");
                public static readonly string larger_less = Url("larger.less");
                public static readonly string list_less = Url("list.less");
                public static readonly string mixins_less = Url("mixins.less");
                public static readonly string path_less = Url("path.less");
                public static readonly string rotated_flipped_less = Url("rotated-flipped.less");
                public static readonly string spinning_less = Url("spinning.less");
                public static readonly string stacked_less = Url("stacked.less");
                public static readonly string variables_less = Url("variables.less");
            }
        
            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
            public static class scss {
                private const string URLPATH = "~/Content/font-awesome/scss";
                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                public static readonly string _bordered_pulled_scss = Url("_bordered-pulled.scss");
                public static readonly string _core_scss = Url("_core.scss");
                public static readonly string _fixed_width_scss = Url("_fixed-width.scss");
                public static readonly string _icons_scss = Url("_icons.scss");
                public static readonly string _larger_scss = Url("_larger.scss");
                public static readonly string _list_scss = Url("_list.scss");
                public static readonly string _mixins_scss = Url("_mixins.scss");
                public static readonly string _path_scss = Url("_path.scss");
                public static readonly string _rotated_flipped_scss = Url("_rotated-flipped.scss");
                public static readonly string _spinning_scss = Url("_spinning.scss");
                public static readonly string _stacked_scss = Url("_stacked.scss");
                public static readonly string _variables_scss = Url("_variables.scss");
                public static readonly string font_awesome_scss = Url("font-awesome.scss");
            }
        
        }
    
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public static class img {
            private const string URLPATH = "~/Content/img";
            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
            public static readonly string android_icon_144x144_png = Url("android-icon-144x144.png");
            public static readonly string android_icon_192x192_png = Url("android-icon-192x192.png");
            public static readonly string android_icon_36x36_png = Url("android-icon-36x36.png");
            public static readonly string android_icon_48x48_png = Url("android-icon-48x48.png");
            public static readonly string android_icon_72x72_png = Url("android-icon-72x72.png");
            public static readonly string android_icon_96x96_png = Url("android-icon-96x96.png");
            public static readonly string apple_icon_114x114_png = Url("apple-icon-114x114.png");
            public static readonly string apple_icon_120x120_png = Url("apple-icon-120x120.png");
            public static readonly string apple_icon_144x144_png = Url("apple-icon-144x144.png");
            public static readonly string apple_icon_152x152_png = Url("apple-icon-152x152.png");
            public static readonly string apple_icon_180x180_png = Url("apple-icon-180x180.png");
            public static readonly string apple_icon_57x57_png = Url("apple-icon-57x57.png");
            public static readonly string apple_icon_60x60_png = Url("apple-icon-60x60.png");
            public static readonly string apple_icon_72x72_png = Url("apple-icon-72x72.png");
            public static readonly string apple_icon_76x76_png = Url("apple-icon-76x76.png");
            public static readonly string apple_icon_precomposed_png = Url("apple-icon-precomposed.png");
            public static readonly string apple_icon_png = Url("apple-icon.png");
            public static readonly string doglogbook_app_png = Url("doglogbook-app.png");
            public static readonly string doglogbook_logo_png = Url("doglogbook-logo.png");
            public static readonly string favicon_16x16_png = Url("favicon-16x16.png");
            public static readonly string favicon_32x32_png = Url("favicon-32x32.png");
            public static readonly string favicon_96x96_png = Url("favicon-96x96.png");
            public static readonly string favicon_ico = Url("favicon.ico");
            public static readonly string intro_bg_png = Url("intro-bg.png");
            public static readonly string logo_header_png = Url("logo-header.png");
            public static readonly string ms_icon_144x144_png = Url("ms-icon-144x144.png");
            public static readonly string ms_icon_150x150_png = Url("ms-icon-150x150.png");
            public static readonly string ms_icon_310x310_png = Url("ms-icon-310x310.png");
            public static readonly string ms_icon_70x70_png = Url("ms-icon-70x70.png");
            public static readonly string phones_png = Url("phones.png");
        }
    
        public static readonly string landing_page_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/landing-page.min.css") ? Url("landing-page.min.css") : Url("landing-page.css");
        public static readonly string Site_scss = Url("Site.scss");
        public static readonly string Site_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/Site.min.css") ? Url("Site.min.css") : Url("Site.css");
    }

    
    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public static partial class Bundles
    {
        public static partial class Scripts 
        {
            public static class Assets
            {
                public const string _references_js = "~/Scripts/_references.js"; 
                public const string bootstrap_js = "~/Scripts/bootstrap.js"; 
                public const string bootstrap_min_js = "~/Scripts/bootstrap.min.js"; 
                public const string jquery_1_10_2_intellisense_js = "~/Scripts/jquery-1.10.2.intellisense.js"; 
                public const string jquery_2_2_3_intellisense_js = "~/Scripts/jquery-2.2.3.intellisense.js"; 
                public const string jquery_2_2_3_js = "~/Scripts/jquery-2.2.3.js"; 
                public const string jquery_2_2_3_min_js = "~/Scripts/jquery-2.2.3.min.js"; 
                public const string jquery_validate_js = "~/Scripts/jquery.validate.js"; 
                public const string jquery_validate_min_js = "~/Scripts/jquery.validate.min.js"; 
                public const string jquery_validate_unobtrusive_js = "~/Scripts/jquery.validate.unobtrusive.js"; 
                public const string jquery_validate_unobtrusive_min_js = "~/Scripts/jquery.validate.unobtrusive.min.js"; 
                public const string modernizr_2_6_2_js = "~/Scripts/modernizr-2.6.2.js"; 
                public const string modernizr_2_8_3_js = "~/Scripts/modernizr-2.8.3.js"; 
                public const string respond_js = "~/Scripts/respond.js"; 
                public const string respond_matchmedia_addListener_js = "~/Scripts/respond.matchmedia.addListener.js"; 
                public const string respond_matchmedia_addListener_min_js = "~/Scripts/respond.matchmedia.addListener.min.js"; 
                public const string respond_min_js = "~/Scripts/respond.min.js"; 
            }
        }
        public static partial class Content 
        {
            public static partial class font_awesome 
            {
                public static partial class css 
                {
                    public static class Assets
                    {
                        public const string font_awesome_css = "~/Content/font-awesome/css/font-awesome.css";
                        public const string font_awesome_min_css = "~/Content/font-awesome/css/font-awesome.min.css";
                    }
                }
                public static partial class fonts 
                {
                    public static class Assets
                    {
                    }
                }
                public static partial class less 
                {
                    public static class Assets
                    {
                    }
                }
                public static partial class scss 
                {
                    public static class Assets
                    {
                    }
                }
                public static class Assets
                {
                }
            }
            public static partial class img 
            {
                public static class Assets
                {
                }
            }
            public static class Assets
            {
                public const string bootstrap_theme_css = "~/Content/bootstrap-theme.css";
                public const string bootstrap_theme_min_css = "~/Content/bootstrap-theme.min.css";
                public const string bootstrap_css = "~/Content/bootstrap.css";
                public const string bootstrap_min_css = "~/Content/bootstrap.min.css";
                public const string landing_page_css = "~/Content/landing-page.css";
            }
        }
    }
}

[GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
internal static class T4MVCHelpers {
    // You can change the ProcessVirtualPath method to modify the path that gets returned to the client.
    // e.g. you can prepend a domain, or append a query string:
    //      return "http://localhost" + path + "?foo=bar";
    private static string ProcessVirtualPathDefault(string virtualPath) {
        // The path that comes in starts with ~/ and must first be made absolute
        string path = VirtualPathUtility.ToAbsolute(virtualPath);
        
        // Add your own modifications here before returning the path
        return path;
    }

    // Calling ProcessVirtualPath through delegate to allow it to be replaced for unit testing
    public static Func<string, string> ProcessVirtualPath = ProcessVirtualPathDefault;

    // Calling T4Extension.TimestampString through delegate to allow it to be replaced for unit testing and other purposes
    public static Func<string, string> TimestampString = System.Web.Mvc.T4Extensions.TimestampString;

    // Logic to determine if the app is running in production or dev environment
    public static bool IsProduction() { 
        return (HttpContext.Current != null && !HttpContext.Current.IsDebuggingEnabled); 
    }
}





#endregion T4MVC
#pragma warning restore 1591, 3008, 3009, 0108, 0114


